<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<comment>This query returns request copy related queries.</comment>
<entry key="eligibleAassetsForDelete.sql">
SELECT TOP 500 
 A.id ASSET_ID, P.customer_id CUSTOMER_ID, AII.id INSTANCE_ID, PATH+
 A.FS_PATH ABSOULUTE_PATH,SLL.storage_type, A.dam_internal_id DAM_INTERNAL_ID
FROM STAR_COMMAND.DBO.STORAGE_LOCATIONS SLL ,
     STAR_COMMAND.DBO.ASSETS A WITH(NOLOCK),
     STAR_COMMAND.DBO.ASSET_INSTANCES AII WITH(NOLOCK),
     STAR_COMMAND.DBO.POLICIES P
WHERE A.DELETE_DATE IS NOT NULL
 AND A.policy_id=P.id
 AND A.ID=AII.ASSET_ID
 AND AII.STORAGE_LOCATION_ID=SLL.ID
 AND AII.STATUS NOT IN ('D')
 AND SLL.ID=:storageId
 --block delete from execution when any jobs are scheduled (in Batch table) 
 --for this asset instance
 AND NOT EXISTS (SELECT 'X' FROM STAR_COMMAND.DBO.BATCHJOBS BJ WITH(NOLOCK)
                  WHERE 
                  BJ.ASSET_INSTANCE_ID=AII.id  AND
                  BJ.STORAGE_ID=SLL.ID AND
                 --BJ.JOB_TYPE IN('COPY_LARGE','COPY_SMALL','RESTORE','COPY_T2') AND 
                  BJ.END_DATE IS NULL)
</entry>

<entry key="updateDeletedAssetInstaces.sql">
UPDATE STAR_COMMAND.DBO.asset_instances set status='D', purge_date=CURRENT_TIMESTAMP where id in(:instanceIds)
</entry>

<entry key="assetEntriesInHistory.sql">
 SELECT DH.ASSET_ID FROM STAR_COMMAND.DBO.DAM_HISTORY_RECS DH, STAR_COMMAND.DBO.ASSET_INSTANCES AI WITH(NOLOCK)
 WHERE AI.ASSET_ID = DH.ASSET_ID AND 
 AI.ID IN (:instanceIds) AND
 DH.THRU_DATE IS NULL
 </entry>

<entry key="updateDamAssetHistory.sql">
UPDATE STAR_COMMAND.DBO.DAM_HISTORY_RECS SET THRU_DATE=CURRENT_TIMESTAMP WHERE 
THRU_DATE IS NULL AND ASSET_ID IN 
(select id from STAR_COMMAND.DBO.assets WITH(NOLOCK) 
WHERE dam_internal_id=:dam_internal_id and Repository=:repository)
</entry>

 <entry key="updateAssetHistory.sql">
 UPDATE STAR_COMMAND.DBO.DAM_HISTORY_RECS SET THRU_DATE=CURRENT_TIMESTAMP WHERE 
 ASSET_ID IN(:assetIds) AND THRU_DATE IS NULL
 </entry>

	<entry key="isPrimarySite.sql">
		SELECT max(is_primary_site) as IS_PRIMARY FROM(
		select s.is_primary_site from STAR_COMMAND.DBO.sites s, STAR_COMMAND.DBO.storage_locations sl
		where sl.site_id=s.id and
		sl.id=:storageId UNION SELECT 0) a
	</entry>

	<entry key="dbSnapshot.sql">
		SELECT A.ID AS ASSET_ID, SL.PATH + A.FS_PATH AS PATH 
		FROM
		STAR_COMMAND.DBO.ASSETS A WITH(NOLOCK),
		STAR_COMMAND.DBO.ASSET_INSTANCES AI WITH(NOLOCK),
		STAR_COMMAND.DBO.STORAGE_LOCATIONS SL
		WHERE
		A.DAM_INTERNAL_ID IS NULL
		AND A.DELETE_DATE IS NULL
		AND A.ID=AI.ASSET_ID
		AND AI.STORAGE_LOCATION_ID=SL.ID
		AND SL.ID=:storageId
	</entry>

	<entry key="updateAssetsWithDeleteDate.sql">
		UPDATE STAR_COMMAND.DBO.ASSETS SET
		DELETE_DATE=GETDATE()
		WHERE ID IN(:assetIds)
	</entry>
	
	<entry key="verifyPolicies.sql">
       select top 1000 id as assetId, fs_path as fsPath
       from STAR_COMMAND.DBO.assets WITH(NOLOCK)
       where policy_id is NULL order by id desc
	</entry>
	
	<entry key="UpdatedAssetsInstances.sql">
SELECT TOP 500 A.ID ASSET_ID, P.CUSTOMER_ID CUSTOMER_ID, AI.ID INSTANCE_ID, SL.PATH+A.FS_PATH ABSOULUTE_PATH,
SL.STORAGE_TYPE, A.DAM_INTERNAL_ID DAM_INTERNAL_ID
  FROM STAR_COMMAND.DBO.ASSET_INSTANCES AI WITH(NOLOCK)
  INNER JOIN STAR_COMMAND.DBO.ASSETS A WITH(NOLOCK) ON AI.ASSET_ID=A.ID
  INNER JOIN STAR_COMMAND.DBO.STORAGE_LOCATIONS SL ON SL.ID=AI.STORAGE_LOCATION_ID
  INNER JOIN STAR_COMMAND.DBO.SITES S1 ON SL.SITE_ID=S1.ID 
  INNER JOIN STAR_COMMAND.DBO.POLICIES P ON P.ID = A.POLICY_ID
  WHERE
  AI.STORAGE_LOCATION_ID=:storageId AND
  AI.STATUS &lt;> 'D' AND
  AI.STATUS &lt;> 'W' AND
  --A.ID=	980254776 AND
-- THIS BLOCK IS TO FINDOUT IF AN ASSET IS FULLY REPLICATED AS PER THE POLICY OR NOT
  EXISTS (
      SELECT  INS_CNT,NO_COPIES FROM  ( 
		SELECT COUNT(DISTINCT SL1.ID) INS_CNT, 
				(SELECT SUM(NUMBER_COPIES) NO_COPIES FROM STAR_COMMAND.DBO.POLICY_SITES PS
                 WHERE PS.POLICY_ID=A.POLICY_ID) NO_COPIES
            FROM STAR_COMMAND.DBO.ASSET_INSTANCES AI_INNER WITH(NOLOCK),STAR_COMMAND.DBO.POLICIES P1,
            STAR_COMMAND.DBO.STORAGE_LOCATIONS SL1
            WHERE
            AI_INNER.ASSET_ID =	A.ID AND
            P1.ID=A.POLICY_ID AND
			(AI_INNER.STATUS = 'V' OR ( AI_INNER.STATUS='N' AND P1.MD5_CHECK=0 )) AND
			AI_INNER.STORAGE_LOCATION_ID = SL1.ID AND
			SL1.ID IN (
                   SELECT DISTINCT CASE WHEN PSS.NUMBER_COPIES &lt; 2 THEN
                     (SELECT TOP 1 SLII.ID FROM  STAR_COMMAND.DBO.STORAGE_LOCATIONS SLII
                     WHERE SLII.SITE_ID=SLI.SITE_ID
                     AND SLII.ID IN 
                     (SELECT AI_INNER2.STORAGE_LOCATION_ID FROM STAR_COMMAND.DBO.ASSET_INSTANCES AI_INNER2 WITH(NOLOCK)
						WHERE AI_INNER2.ASSET_ID = A.ID AND AI_INNER2.STATUS='V')
                     )
                     ELSE SLI.ID
                     END
                      FROM STAR_COMMAND.DBO.STORAGE_LOCATIONS SLI,
                      STAR_COMMAND.DBO.POLICY_SITES PSS
                           WHERE
                              PSS.SITE_ID=SLI.SITE_ID AND
                              PSS.POLICY_ID=A.POLICY_ID AND
                              PSS.NUMBER_COPIES &lt;> 0
                              GROUP BY SLI.ID,SLI.SITE_ID,PSS.NUMBER_COPIES  )
      )  T WHERE T.NO_COPIES = T.INS_CNT
  )
-- THIS BLOCK WILL FINDOUT THAT THE SPECIFIC INSTANCE OF ASSET, AS PER THE INPUT SL_ID, IS EXTRA ON THAT STORAGE_ID OR NOT 
AND 
( 
	NOT EXISTS
	(
	SELECT PS.NUMBER_COPIES FROM STAR_COMMAND.DBO.POLICY_SITES PS 
	WHERE 
	PS.POLICY_ID= A.POLICY_ID AND
	PS.SITE_ID=S1.ID AND  
	PS.NUMBER_COPIES =(
		SELECT COUNT(DISTINCT AIII.STORAGE_LOCATION_ID) FROM STAR_COMMAND.DBO.ASSET_INSTANCES AIII, STAR_COMMAND.DBO.POLICIES P11 
			   WHERE 
			   AIII.ASSET_ID=A.ID  AND  
			   P11.ID=A.POLICY_ID AND
			   (AIII.STATUS = 'V' OR ( AIII.STATUS='N' AND P11.MD5_CHECK=0 )) AND
			   AIII.STORAGE_LOCATION_ID IN(
				SELECT SL1.ID FROM STAR_COMMAND.DBO.STORAGE_LOCATIONS SL1
					WHERE 
					SL1.SITE_ID IN
					(SELECT SL11.SITE_ID FROM STAR_COMMAND.DBO.STORAGE_LOCATIONS SL11 WHERE SL11.ID = AI.STORAGE_LOCATION_ID)
			   )
		)
	)
)
AND EXISTS(
	SELECT 1 FROM STAR_COMMAND.DBO.ASSET_INSTANCES AI_3 WITH(NOLOCK)
	WHERE 
	AI_3.ASSET_ID=AI.ASSET_ID
	AND AI_3.STORAGE_LOCATION_ID &lt;> AI.STORAGE_LOCATION_ID  
)
-- THIS BLOCK WILL FINDOUT THAT THE JOB IS IN PROGRESS IN JOBS_TABLE OR NOT 
AND NOT EXISTS(
      SELECT 'X' FROM STAR_COMMAND.DBO.BATCHJOBS BJ WITH(NOLOCK)
      WHERE
            BJ.ASSET_INSTANCE_ID=AI.ID  AND
            BJ.STORAGE_ID=AI.STORAGE_LOCATION_ID AND
            BJ.END_DATE IS NULL
)
 	</entry>
	
	<entry key="assetsInstancesCount.sql">
		select count(*) from STAR_COMMAND.DBO.assets a WITH(NOLOCK),
		 STAR_COMMAND.DBO.asset_instances ai WITH(NOLOCK),
		 STAR_COMMAND.DBO.storage_locations sl, STAR_COMMAND.DBO.sites s,
		 STAR_COMMAND.DBO.policies p
		where
		a.id = :assetId 
		and ai.asset_id=a.id
		and a.policy_id=p.id
		and (ai.status in ('V','W')  or (ai.status='N' and p.md5_check=0))
		and ai.storage_location_id = sl.id
		and sl.site_id= s.id --and s.is_primary_site = 0
	</entry>
	
	<entry key="migrateAssetQuery.sql">
		update STAR_COMMAND.DBO.asset_instances set status='N'
		   OUTPUT   inserted.asset_id 
		where status='O'
		AND asset_id IN (select id from STAR_COMMAND.DBO.assets WITH(NOLOCK) 
		where fs_path=?)	
	</entry>

	<entry key="changeInstanceStatus.sql">
		update STAR_COMMAND.DBO.asset_instances set status=:status where id=:instanceId 
		and exists(select  1 from STAR_COMMAND.DBO.assets a WITH(NOLOCK) 
		where a.id=asset_id and a.delete_date is null) 
	</entry>
	
	<entry key="validAssetInstances.sql">
		select count(*) from STAR_COMMAND.DBO.assets a WITH(NOLOCK),STAR_COMMAND.DBO.asset_instances ai WITH(NOLOCK) 
		where a.id=ai.asset_id
		and ai.status in ('N','V') and a.id =:assetId
	</entry>
	
</properties>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<comment>This query returns request MD5 related queries.</comment>

<entry key="getJobCountForAllJobTypes.sql">
SELECT
        SUM(CASE WHEN jType = 'MD5' AND status = 'NEW' THEN cnt ELSE 0 END)        AS MD5_RUNNING_COUNT
      , SUM(CASE WHEN jType = 'MD5' AND status = 'ERROR' THEN cnt ELSE 0 END)      AS MD5_FAILED_COUNT
      , SUM(CASE WHEN jType = 'MD5' AND status = 'COMPLETED' THEN cnt ELSE 0 END)  AS MD5_COMPLETED_COUNT
      
      , SUM(CASE WHEN jType = 'COPY' AND status = 'COMPLETED' THEN cnt ELSE 0 END) AS COPY_COMPLETED_COUNT
      , SUM(CASE WHEN jType = 'COPY' AND status = 'NEW' THEN cnt ELSE 0 END)       AS COPY_RUNNING_COUNT
      , SUM(CASE WHEN jType = 'COPY' AND status = 'ERROR' THEN cnt ELSE 0 END)     AS COPY_FAILED_COUNT
      
      , SUM(CASE WHEN jType = 'MD5' THEN cnt ELSE 0 END)                           AS MD5_TOTAL
      , SUM(CASE WHEN jType = 'COPY' THEN cnt ELSE 0 END)                          AS COPY_TOTAL
       
      , SUM(CASE WHEN status = 'NEW' THEN cnt ELSE 0 END)                           AS TOTAL_RUNNING
      , SUM(CASE WHEN status = 'ERROR' THEN cnt ELSE 0 END)                         AS TOTAL_FAILED
      , SUM(CASE WHEN status = 'COMPLETED' THEN cnt ELSE 0 END)                     AS TOTAL_COMPLETED
FROM (
        SELECT JOB_STATUS as status
              , CASE 
                   WHEN JOB_TYPE IN ('MD5_LARGE', 'MD5_SMALL') THEN 'MD5' 
                   WHEN JOB_TYPE IN ('COPY_LARGE', 'COPY_SMALL') THEN 'COPY' 
              END AS jType
              ,COUNT(1) as  cnt
        FROM ASSET_REPLICA.dbo.BATCHJOBS WITH(NOLOCK)
        WHERE 
        (
         ( JOB_STATUS = 'NEW' AND [START_DATE] >= DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), :day) )
        OR 
          [END_DATE] >= DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), :day)
       )
       AND JOB_TYPE IN ('MD5_LARGE', 'MD5_SMALL', 'COPY_LARGE', 'COPY_SMALL')
       AND JOB_STATUS IN ('ERROR', 'COMPLETED', 'NEW')
        GROUP BY JOB_STATUS
               , CASE 
                   WHEN JOB_TYPE IN ('MD5_LARGE', 'MD5_SMALL') THEN 'MD5' 
                   WHEN JOB_TYPE IN ('COPY_LARGE', 'COPY_SMALL') THEN 'COPY' 
              END
        ) AS T

</entry>
<entry key="getAllNewJobsByType.sql">
SELECT BJ.JOB_ID,BJ.JOB_TYPE,AI.FILENAME,SL.NAME as STORAGE_NAME,
BJ.REQUEST_HOST_NAME,BJ.START_DATE,BJ.END_DATE,AI.ASSET_ID as ASSETID,BJ.ERROR_MESSAGE AS ERRMSG,BJ.JOB_STATUS,
A.POLICY_ID AS POLICY_ID,C.NAME AS CUST_NAME FROM 
ASSET_REPLICA.DBO.BATCHJOBS BJ WITH(NOLOCK),
ASSET_INSTANCES AI WITH(NOLOCK),
STORAGE_LOCATIONS SL,
ASSETS A WITH(NOLOCK), 
CUSTOMERS C,
POLICIES P 
WHERE  
AI.ASSET_ID=A.ID AND
AI.ID=BJ.ASSET_INSTANCE_ID AND 
SL.ID = BJ.STORAGE_ID AND
P.CUSTOMER_ID=C.ID AND 
A.POLICY_ID=P.ID AND 
JOB_TYPE IN (:jobType1,:jobType2,:jobType3) AND 
JOB_STATUS='NEW' AND 
DATEDIFF(DAY,START_DATE,GETDATE()) &lt;= :day
ORDER BY BJ.JOB_ID DESC
</entry>
	
<entry key="getAllJobsByType.sql">
SELECT BJ.JOB_ID,BJ.JOB_TYPE,AI.FILENAME,SL.NAME as STORAGE_NAME,
BJ.REQUEST_HOST_NAME,BJ.START_DATE,BJ.END_DATE,AI.ASSET_ID as ASSETID,BJ.ERROR_MESSAGE AS ERRMSG,BJ.JOB_STATUS,
A.POLICY_ID AS POLICY_ID,C.NAME AS CUST_NAME FROM 
ASSET_REPLICA.DBO.BATCHJOBS BJ WITH(NOLOCK),
ASSET_INSTANCES AI WITH(NOLOCK),
STORAGE_LOCATIONS SL,
ASSETS A WITH(NOLOCK), 
CUSTOMERS C,
POLICIES P 
WHERE  
AI.ASSET_ID=A.ID AND
AI.ID=BJ.ASSET_INSTANCE_ID AND 
SL.ID = BJ.STORAGE_ID AND
P.CUSTOMER_ID=C.ID AND 
A.POLICY_ID=P.ID AND 
JOB_TYPE IN (:jobType1,:jobType2,:jobType3) AND 
JOB_STATUS=:jobStatus AND 
DATEDIFF(DAY,END_DATE,GETDATE()) &lt;= :day
ORDER BY BJ.JOB_ID DESC
</entry>	

<entry key="getInvalidAssetCount.sql">
SELECT COUNT(DISTINCT A.ID) FROM ASSETS A WITH(NOLOCK),ASSET_INSTANCES AI WITH(NOLOCK),
STORAGE_LOCATIONS SL, POLICIES P, CUSTOMERS C 
WHERE 
A.DELETE_DATE IS NULL AND
A.ID=AI.ASSET_ID AND 
A.POLICY_ID=P.ID AND 
P.CUSTOMER_ID=C.ID AND 
AI.STORAGE_LOCATION_ID=SL.ID AND 
AI.STATUS='I' AND 
EXISTS
(SELECT 1 FROM POLICY_SITES PS WHERE PS.POLICY_ID=A.POLICY_ID AND PS.SITE_ID=SL.SITE_ID AND PS.NUMBER_COPIES > 0 ) 
AND 
NOT EXISTS
(SELECT 1 FROM ASSET_INSTANCES AII WITH(NOLOCK) 
WHERE AII.ASSET_ID=A.ID AND AII.STATUS IN('N','V') AND 
AII.STORAGE_LOCATION_ID = SL.ID)
</entry>
	
<entry key="getInvalidAssetDetails.sql">
SELECT A.ID AS ASSETID,A.NAME AS ASSETNAME,A.POLICY_ID AS POLICYID,
C.NAME AS CUSTNAME,A.FILESIZE AS FILESIZE,SL.NAME AS SLNAME 
FROM 
ASSETS A WITH(NOLOCK),ASSET_INSTANCES AI WITH(NOLOCK),STORAGE_LOCATIONS SL,
POLICIES P, CUSTOMERS C 
WHERE 
A.DELETE_DATE IS NULL AND
A.ID=AI.ASSET_ID AND 
A.POLICY_ID=P.ID AND 
P.CUSTOMER_ID=C.ID AND 
AI.STORAGE_LOCATION_ID=SL.ID AND 
AI.STATUS='I' AND 
EXISTS
(SELECT 1 FROM POLICY_SITES PS WHERE PS.POLICY_ID=A.POLICY_ID AND PS.SITE_ID=SL.SITE_ID AND PS.NUMBER_COPIES > 0 ) 
AND 
NOT EXISTS
(SELECT 1 FROM ASSET_INSTANCES AII WITH(NOLOCK) 
WHERE 
AII.ASSET_ID=A.ID AND 
AII.STATUS IN('N','V') AND 
AII.STORAGE_LOCATION_ID = SL.ID) 
ORDER BY A.ID
</entry>

<entry key="getCustomerNames.sql">
select id,name from ASSET_REPLICA.dbo.customers c
</entry>

<entry key="getJobDetails.sql">
UPDATE ASSET_REPLICA.DBO.BATCHJOBS 
SET JOB_STATUS='ERROR',END_DATE=GETDATE(),ERROR_MESSAGE='MANUAL RESUBMIT' 
OUTPUT INSERTED.JOB_ID, INSERTED.JOB_STATUS, INSERTED.END_DATE, INSERTED.ERROR_MESSAGE
WHERE JOB_STATUS='NEW' AND JOB_ID=:jobId
</entry>

<entry key="getLocations.sql">
select name,id from ASSET_REPLICA.dbo.storage_locations
</entry>
	
</properties>
